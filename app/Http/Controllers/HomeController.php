<?php

namespace App\Http\Controllers;


use Illuminate\Console\Scheduling\Event;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Request;

class HomeController extends Controller
{
    public $service_url;
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {

    }

    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        return view('home');
    }


    public function FindICD10Codes()
    {
        $a = stripslashes($_POST['HealthConditions']);

        $healthConditions = json_decode($a);
        $returnarray = array();
        foreach ($healthConditions as $condition){
            $queryClasses = DB::table('ICD10Classes');
            $conditionWords = explode(' ',$condition);

            foreach ($conditionWords as $conditionWord){

                $like = "%".$conditionWord."%";
                $queryClasses->orWhere("preferred", "like", $like);
            }
            $resultClasses = $queryClasses->get()->toArray();

            $querySuperclassses = DB::table('ICD10SuperClasses');
            $conditionWords = explode(' ',$condition);

            foreach ($conditionWords as $conditionWord){

                $like = "%".$conditionWord."%";
                $querySuperclassses->orWhere("preferred", "like", $like);
            }
            $resultSuperClasses = $querySuperclassses->get()->toArray();

            $queryBlocks = DB::table('ICD10Blocks');
            $conditionWords = explode(' ',$condition);

            foreach ($conditionWords as $conditionWord){

                $like = "%".$conditionWord."%";
                $queryBlocks->orWhere("preferred", "like", $like);
            }

            $resultBlock = $queryBlocks->get()->toArray();

            $result = array_merge($resultClasses, $resultSuperClasses, $resultBlock);

            foreach ($result as $ICD10Entry){
                foreach ($conditionWords as $conditionWord) {
                    if(count($conditionWords) == 1 && strtolower($ICD10Entry->preferred) == strtolower($conditionWord)){
                        $ICD10Entry->{"match"} = 1000;
                        break;
                    }


                    if(contains($conditionWord, $ICD10Entry->preferred, false)){
                        if(isset($ICD10Entry->{"match"})){
                            $ICD10Entry->{"match"} += (1 / count($conditionWords));
                        }
                        else{
                            $ICD10Entry->{"match"} = (1 / count($conditionWords));
                        }
                    }
                }
            }


            $bool = usort($result, function($a, $b){
                if($a->match > $b->match){
                    return -1;
                }
                else if ($a->match == $b->match){
                    return 0;
                }
                else{
                    return 1;
                }
            });

            if(count($result) > 0)
            {
                $bestResult = $result[0];
                $bestResult->{"OriginalHealthCondition"} = $condition;
                array_push($returnarray, $bestResult);
            }
            else{
            }
        }

        return JsonResponse::create($returnarray);





    }
    public function FindSNOWMEDCodes(){

        $name = $_POST['name'];
        $name = join("%20",explode(" ", $name));
// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        $url = "http://browser.ihtsdotools.org/api/snomed/en-edition/v20170131/descriptions?query=".$name;

        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close ($ch);

        $resultarray = \GuzzleHttp\json_decode($result);
        if(count($resultarray->matches)>0){
            $urlConcepts = "http://browser.ihtsdotools.org/api/snomed/en-edition/v20170131/concepts/".$resultarray->matches[0]->conceptId;
            $ch1 = curl_init();
            curl_setopt($ch1, CURLOPT_URL, $urlConcepts);
            curl_setopt($ch1, CURLOPT_RETURNTRANSFER, 1);

            $result = curl_exec($ch1);
            if (curl_errno($ch1)) {
                echo 'Error:' . curl_error($ch1);
            }
            $resultarrayConcepts = \GuzzleHttp\json_decode($result);
            curl_close ($ch1);

        }
        else{
            return JsonResponse::create($resultarray);
        }
    }
    public function FindATCCodes()
    {

        $concept = $_POST["name"];
        $quantity = join(" ",preg_split('/(?<=[0-9])(?=[a-z]+)/i',$_POST["quantity"]));
        $returnarray = array();
        $medications = explode(' ',$concept);
        foreach ($medications as $medication){
            $query = DB::table('Medications');
            $medicationWords = explode(' ',$medication);

            foreach ($medicationWords as $medicationWord){

                $like = "%".$medicationWord."%";
                $query->orWhere("description", "like", $like);
            }
            $result = $query->get();

            foreach ($result as $ATCEntry){
                //Compare concept similarity
                foreach ($medicationWords as $conditionWord) {
                    if(contains($conditionWord, $ATCEntry->description, false)){
                        if(isset($ATCEntry->{"match"})){
                            $ATCEntry->{"match"} += 1;
                        }
                        else{
                            $ATCEntry->{"match"} = 1;
                        }


                    }
                }
                //Compare Strength
                if($ATCEntry->strength == $quantity){
                    if(isset($ATCEntry->{"match"})){
                        $ATCEntry->{"match"} += 1;
                    }
                    else{
                        $ATCEntry->{"match"} = 1;
                    }
                }
            }

            $arrayResult = $result->all();
            $bool = usort($arrayResult, function($a, $b){
                if($a->match > $b->match){
                    return -1;
                }
                else if ($a->match == $b->match){
                    return 0;
                }
                else{
                    return 1;
                }
            });

            if(count($arrayResult) > 0)
            {
                $bestResult = $arrayResult[0];
                $bestResult->{"OriginalMedication"} = $concept;
                array_push($returnarray, $bestResult);
            }
            else{
            }
        }

        return JsonResponse::create($returnarray);


    }

    public function UMLSGetServiceTicket(){
        $api_key = "f70d6f42-d385-48df-81a3-23d79e71d2a4";

        $url = "https://utslogin.nlm.nih.gov/cas/v1/api-key";

        if(!isset($ch)){
            $ch = curl_init();
        }


        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "apikey=".$api_key);
        curl_setopt($ch, CURLOPT_POST, 1);

        $result = curl_exec($ch);
        //echo "CURL for getting service ticket:" . curl_getinfo($ch, CURLINFO_TOTAL_TIME) . "</br>";
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }



        // Create a DOM object
        $dom = new \DOMDocument();
// Load HTML from a string
        $dom->loadHTML($result);


        foreach($dom->getElementsByTagName('form') as $link) {
            $this->service_url = $link->getAttribute('action');
        }
    }
    public function UMLSGetRequestTicket(){
        if(!isset($this->service_url)){
            $this->UMLSGetServiceTicket();
        }
        if(!isset($ch)){
            $ch = curl_init();
        }


        curl_setopt($ch, CURLOPT_URL, $this->service_url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "service=http://umlsks.nlm.nih.gov");
        curl_setopt($ch, CURLOPT_POST, 1);

        $result = curl_exec($ch);
        //echo "CURL for getting request ticket:" . curl_getinfo($ch, CURLINFO_TOTAL_TIME) . "</br>";
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        return $result;
    }

    public function UMLS(){
        $ticket = $this->UMLSGetRequestTicket();

        $searchstring = $_POST['text'];
        $atomsources = $_POST['atomsources'];

        $values = array(
            'ticket' => $ticket,
            'string' => $searchstring,
            'sabs' => $atomsources

        );

        $params = http_build_query($values);
        $url = "https://uts-ws.nlm.nih.gov/rest/search/current?".$params;

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);



        $result = curl_exec($ch);

        //echo "CURL for URL: " . $url . ": " . curl_getinfo($ch, CURLINFO_TOTAL_TIME). "</br>";
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }



        $json = json_decode($result);
        $NumberOfResults = 0;
        $MaxResults = 1;

        foreach ($json->result->results as $result){
            if($NumberOfResults < $MaxResults){
                if(isset($result->uri)){
                    $NumberOfResults++;
                    $url = $result->uri . "/atoms";
                    $atoms =$this->UMLSByURL($url);
                    $bool = usort($atoms->result, function($a, $b){
                        if($a->termType == "PT" &&  $b->termType != "PT"){
                            return -1;
                        }
                        else if ($a->termType == "PT" &&  $b->termType == "PT"){
                            return 0;
                        }
                        else{
                            return 1;
                        }
                    });
                    $result->{"atomInformation"} = $atoms;
                }
            }

        }



        return JsonResponse::create($json->result->results);
    }
    public function UMLSByURL($uri){
        $ticket = $this->UMLSGetRequestTicket();
        $atomsources = $_POST['atomsources'];
        $values = array(
            'ticket' => $ticket,
            'sabs' => $atomsources
        );
        $params = http_build_query($values);
        $url = $uri."?".$params;

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

        $result = curl_exec($ch);
        //echo "CURL for URL: " . $url . ": " . curl_getinfo($ch, CURLINFO_TOTAL_TIME). "</br>";
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close ($ch);

        $json = json_decode($result);
        return $json;
    }


    function contains($needle, $haystack, $casesensitive)
    {
        if($casesensitive){
            $bool = strpos($haystack, $needle) !== false;
            return  $bool;
        }
        else{
            $bool = strpos(strtolower($haystack), strtolower($needle)) !== false;
            return  $bool;
        }


    }

}


